import logging
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    CommandHandler,
    MessageHandler,
    filters,
    CallbackQueryHandler,
)

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
BOT_TOKEN = "8253495388:AAHIMBBOi4VDIPE-_38vAfwaWAmCRejYK1U"  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π
GROUP_ID = -1003068970627  # –ó–∞–º–µ–Ω–∏ –Ω–∞ ID –≥—Ä—É–ø–ø—ã

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# === /start ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º, –¥–æ—Ä–æ–≥–æ–π –ø–æ–¥–ø–∏—Å—á–∏–∫!\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –¥–ª—è –∫–∞–Ω–∞–ª–∞."
    )

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===
async def handle_user_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    message = update.message

    # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    username = f"@{user.username}" if user.username else "–Ω–µ—Ç username"
    full_name = f"{user.first_name} {user.last_name}" if user.last_name else user.first_name

    # –ü–æ–¥–ø–∏—Å—å –≤ –≥—Ä—É–ø–ø—É
    caption = (
        f"üì¨ <b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç:</b>\n\n"
        f"üë§ <b>–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:</b>\n"
        f"‚Ä¢ Username: {username}\n"
        f"‚Ä¢ –ò–º—è: {full_name}\n"
    )

    try:
        # === –¢–ï–ö–°–¢ ===
        if message.text:
            await context.bot.send_message(
                chat_id=GROUP_ID,
                text=caption + f"\nüìù <b>–¢–µ–∫—Å—Ç:</b>\n{message.text}",
                parse_mode='HTML'
            )
            await message.reply_text("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")

        # === –§–û–¢–û ===
        elif message.photo:
            file_id = message.photo[-1].file_id  # –°–∞–º–æ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ
            caption_msg = caption + f"\nüñº <b>–§–æ—Ç–æ</b>"
            await context.bot.send_photo(
                chat_id=GROUP_ID,
                photo=file_id,
                caption=caption_msg,
                parse_mode='HTML'
            )
            await message.reply_text("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")

        # === –í–ò–î–ï–û ===
        elif message.video:
            file_id = message.video.file_id
            caption_msg = (
                caption +
                f"\nüé• <b>–í–∏–¥–µ–æ</b>\n"
                f"–†–∞–∑–º–µ—Ä: {message.video.file_size // 1024} –ö–ë"
            )
            await context.bot.send_video(
                chat_id=GROUP_ID,
                video=file_id,
                caption=caption_msg,
                parse_mode='HTML'
            )
            await message.reply_text("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")

        # === GIF (–∞–Ω–∏–º–∞—Ü–∏—è) ===
        elif message.animation:
            file_id = message.animation.file_id
            caption_msg = (
                caption +
                f"\nüé¨ <b>GIF / –ê–Ω–∏–º–∞—Ü–∏—è</b>\n"
                f"–†–∞–∑–º–µ—Ä: {message.animation.file_size // 1024} –ö–ë"
            )
            await context.bot.send_animation(
                chat_id=GROUP_ID,
                animation=file_id,
                caption=caption_msg,
                parse_mode='HTML'
            )
            await message.reply_text("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")

        # === –ê–£–î–ò–û (–º—É–∑—ã–∫–∞) ===
        elif message.audio:
            file_id = message.audio.file_id
            title = message.audio.title or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
            caption_msg = (
                caption +
                f"\nüéµ <b>–ê—É–¥–∏–æ</b>\n"
                f"–ù–∞–∑–≤–∞–Ω–∏–µ: {title}"
            )
            await context.bot.send_audio(
                chat_id=GROUP_ID,
                audio=file_id,
                caption=caption_msg,
                parse_mode='HTML'
            )
            await message.reply_text("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")

        # === –ì–û–õ–û–°–û–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï ===
        elif message.voice:
            file_id = message.voice.file_id
            duration = message.voice.duration
            caption_msg = (
                caption +
                f"\nüó£ <b>–ì–æ–ª–æ—Å–æ–≤–æ–µ</b>\n"
                f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration} —Å–µ–∫."
            )
            await context.bot.send_voice(
                chat_id=GROUP_ID,
                voice=file_id,
                caption=caption_msg,
                parse_mode='HTML'
            )
            await message.reply_text("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")


        # === –í–ò–î–ï–û-–°–û–û–ë–©–ï–ù–ò–ï (–∫—Ä—É–∂–æ–∫) ===
        elif message.video_note:
            file_id = message.video_note.file_id
            duration = message.video_note.duration
            caption_msg = (
                caption +
                f"\nüî¥ <b>–í–∏–¥–µ–æ-—Å–æ–æ–±—â–µ–Ω–∏–µ</b>\n"
                f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration} —Å–µ–∫."
            )
            await context.bot.send_video_note(chat_id=GROUP_ID, video_note=file_id)
            await context.bot.send_message(
                chat_id=GROUP_ID,
                text=caption_msg,
                parse_mode='HTML'
            )
            await message.reply_text("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")

        # === –°–¢–ò–ö–ï–† ===
        elif message.sticker:
            file_id = message.sticker.file_id
            emoji = message.sticker.emoji or "‚ùì"
            caption_msg = (
                caption +
                f"\nüîñ <b>–°—Ç–∏–∫–µ—Ä</b>\n"
                f"–≠–º–æ–¥–∑–∏: {emoji}"
            )
            await context.bot.send_sticker(chat_id=GROUP_ID, sticker=file_id)
            await context.bot.send_message(
                chat_id=GROUP_ID,
                text=caption_msg,
                parse_mode='HTML'
            )
            await message.reply_text("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")

        else:
            # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø
            await context.bot.send_message(
                chat_id=GROUP_ID,
                text=caption + "\nüì© <b>–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞</b>",
                parse_mode='HTML'
            )
            await message.reply_text("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")

        logger.info(f"–ö–æ–Ω—Ç–µ–Ω—Ç –æ—Ç {username} ({user.id}) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")
        await message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –≤ –≥—Ä—É–ø–ø–µ ===
async def handle_reply_in_group(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
    if not message.reply_to_message or not message.text:
        return

    replied = message.reply_to_message

    # –ò—â–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–µ–∫—Å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
    import re
    match = re.search(r"ID: <code>(\d+)</code>", replied.text)
    if not match:
        return  # –ù–µ –Ω–∞—à–ª–∏ ID ‚Äî –≤—ã—Ö–æ–¥–∏–º

    user_id = int(match.group(1))

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç–∏–ª –º–æ–¥–µ—Ä–∞—Ç–æ—Ä (–Ω–µ –±–æ—Ç –∏ –Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
    if message.from_user.id == context.bot.id:
        return

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await context.bot.send_message(
            chat_id=user_id,
            text=f"üì¨ –û—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞:\n\n{message.text}"
        )
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ
        await message.reply_text("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
        logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    except Exception as e:
        error_msg = str(e).lower()
        if "blocked" in error_msg or "kicked" in error_msg:
            await message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.")
        else:
            await message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

# === –ó–ê–ü–£–°–ö ===
if __name__ == '__main__':
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(CommandHandler('start', start))
    app.add_handler(MessageHandler(filters.ALL, handle_user_message))  # –í—Å–µ —Ç–∏–ø—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    app.add_handler(MessageHandler(filters.REPLY, handle_reply_in_group))  # –û—Ç–≤–µ—Ç—ã –≤ –≥—Ä—É–ø–ø–µ

    logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ–Ω–æ–º–Ω–æ...")
    app.run_polling()